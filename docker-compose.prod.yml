# Production Docker Compose for Autemix Admin Platform
# Usage: docker compose -f docker-compose.prod.yml up -d

services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: autemix_admin_production
      POSTGRES_USER: ${POSTGRES_USER:-autemix}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-autemix}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - autemix-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - autemix-network
    restart: unless-stopped

  backend:
    image: ${REGISTRY:-ghcr.io/autemix}/autemix-backend:${VERSION:-latest}
    ports:
      - "3001:3001"
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-autemix}:${POSTGRES_PASSWORD}@postgres:5432/autemix_admin_production
      - REDIS_URL=redis://redis:6379/0
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autemix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    image: ${REGISTRY:-ghcr.io/autemix}/autemix-frontend:${VERSION:-latest}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:3001
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - autemix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - autemix-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  autemix-network:
    driver: bridge